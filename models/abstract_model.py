from abc import ABC, abstractmethod

class AbstractModel(ABC):
    """
    An abstract class that represents a model in our framework.
    Subclasses are required to implement the defined abstract methods.
    """
    
    def __init__(self, dataset_name):
        self.dataset_name = dataset_name
        self.epoch_losses = {"train": [], "test": []}
        self.to_drive = False
        self.drive_path = ""
        
    @staticmethod
    def _sanitize_path(path, trailing_slash=False):
        """
        Sanitize the folder path to be compatible with Unix paths.

        Parameters:
        ----------
        path : str
            The path to sanitize.
        trailing_slash : bool
            Whether to add a trailing slash to the path.
        """
        
        path = path.strip()  # Remove leading/trailing whitespace
        path = path.rstrip("/")  # Remove trailing slashes
        if trailing_slash:
            path += '/'  # Add trailing slash if requested
        return path
    
    def get_save_dir(self, base_dir):
        """
        Get the full save directory path, adjusting for Google Drive if needed.
        """
        base_dir = self._sanitize_path(base_dir)
        if self.to_drive:
            return f"/content/drive/MyDrive/{self.drive_path}{base_dir}_{self.dataset_name}"
        else:
            return f"{base_dir}_{self.dataset_name}"
    
    @abstractmethod
    def train(self, num_epochs, device, save_interval):
        """
        Run the training loop for the model.
        """
        pass
    
    @abstractmethod
    def save_models(self, epoch):
        """
        Save the model parameters.
        """
        pass
    
    @abstractmethod
    def generate_images(self, epoch, device):
        """
        Save images generated by the model.
        """
        pass
    
    @abstractmethod
    def save_checkpoint(self, epoch, save_dir):
        """
        Save a checkpoint of the model.
        """
        pass

    @classmethod
    @abstractmethod
    def from_checkpoint(cls, checkpoint_path, device):
        """
        Create a model instance from a checkpoint.
        """
        pass

    @staticmethod
    @abstractmethod
    def weights_init_normal(m):
        """
        Initialize weights of the model with a normal distribution.
        """
        pass
